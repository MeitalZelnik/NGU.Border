//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

#set ($numOfIdentifiers=0)
#set ($isObjectValidator=true)
#set($I = "I")
#set ($identityField="")
#set ($MultiLanguage="MultiLanguage")
#set ($ObjectValidationBase="ObjectValidationBase")
#set($Bracket = "()")
#foreach($field in $clazz.Fields())  
	#if($field.Identifier)
		#set ($numOfIdentifiers = $numOfIdentifiers + 1)
		#set ($identityField = $field)
	#end
#end

#if($clazz.hasMeta("IsMultiLang"))
#set ( 	$isObjectValidator = false )
#end
#if($isObjectValidator==false )
// /$$      /$$           /$$   /$$     /$$ /$$                                                                            
//| $$$    /$$$          | $$  | $$    |__/| $$                                                                            
//| $$$$  /$$$$ /$$   /$$| $$ /$$$$$$   /$$| $$        /$$$$$$  /$$$$$$$   /$$$$$$  /$$   /$$  /$$$$$$   /$$$$$$   /$$$$$$ 
//| $$ $$/$$ $$| $$  | $$| $$|_  $$_/  | $$| $$       |____  $$| $$__  $$ /$$__  $$| $$  | $$ |____  $$ /$$__  $$ /$$__  $$
//| $$  $$$| $$| $$  | $$| $$  | $$    | $$| $$        /$$$$$$$| $$  \ $$| $$  \ $$| $$  | $$  /$$$$$$$| $$  \ $$| $$$$$$$$
//| $$\  $ | $$| $$  | $$| $$  | $$ /$$| $$| $$       /$$__  $$| $$  | $$| $$  | $$| $$  | $$ /$$__  $$| $$  | $$| $$_____/
//| $$ \/  | $$|  $$$$$$/| $$  |  $$$$/| $$| $$$$$$$$|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$/|  $$$$$$$|  $$$$$$$|  $$$$$$$
//|__/     |__/ \______/ |__/   \___/  |__/|________/ \_______/|__/  |__/ \____  $$ \______/  \_______/ \____  $$ \_______/
//                                                                       /$$  \ $$                     /$$  \ $$          
//                                                                      |  $$$$$$/                    |  $$$$$$/          
//                                                                       \______/                      \______/          
#end

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using NHibernate.UserTypes;
using Pangea.BaseStructures;
using Pangea.BasicValidators;
using System.Linq;


//${classimports}
${languageTool.getPackageDeclaration($clazz)}
{

    public class C$clazz.generatedName#if(($languageTool.hasExtends($clazz))||($languageTool.hasImplements($clazz))) :#end #if($languageTool.hasExtends($clazz))C$languageTool.getExtends($clazz)#end#if(($languageTool.hasExtends($clazz))&&($languageTool.hasImplements($clazz))),#end$languageTool.getImplements($clazz)#if(!$languageTool.hasExtends($clazz))#if($languageTool.hasImplements($clazz)),#else:#end ConstField#end
    
    {
#foreach($field in $clazz.Fields())
#if(($field.ClassType.Primitive)||($field.ClassType.Name == "DateTime")||($field.ClassType.Name == "Int64")||($field.ClassType.Name == "IList")||($field.ClassType.Name == "ISet")||($field.FullyQualifiedTypeName!=$field.ClassType.Name)||($field.ClassType.Name == "YesNoToBoolUserType")||($field.ClassType.Name == "YesNoToNullableBoolUserType")||($field.ClassType.Name == "NumberToBoolUserType"))
		private ConstField _$field.propcase = null;
#else
		private C$field.ClassType.Name _$field.propcase = null;
#end
#end


        public C${clazz.generatedName}()
        {
#foreach($field in $clazz.Fields())
#if(($field.ClassType.Primitive)||($field.ClassType.Name == "DateTime")||($field.ClassType.Name == "Int64")||($field.ClassType.Name == "IList")||($field.ClassType.Name == "ISet")||($field.FullyQualifiedTypeName!=$field.ClassType.Name)||($field.ClassType.Name == "YesNoToBoolUserType")||($field.ClassType.Name == "YesNoToNullableBoolUserType")||($field.ClassType.Name == "NumberToBoolUserType"))
			_$field.propcase = new ConstField("$field.propcase");
#else
			_$field.propcase = new C${field.FullyQualifiedTypeName}("$field.propcase");
#end
#end
        }
        

        public C${clazz.generatedName}(string parent)
            : base(parent)
        {
#foreach($field in $clazz.Fields())
#if(($field.ClassType.Primitive)||($field.ClassType.Name == "DateTime")||($field.ClassType.Name == "Int64")||($field.ClassType.Name == "IList")||($field.ClassType.Name == "ISet")||($field.FullyQualifiedTypeName!=$field.ClassType.Name)||($field.ClassType.Name == "YesNoToBoolUserType")||($field.ClassType.Name == "YesNoToNullableBoolUserType")||($field.ClassType.Name == "NumberToBoolUserType"))
			_$field.propcase = new ConstField("$field.propcase", parent);
#else
			_$field.propcase = new C${field.FullyQualifiedTypeName}("$field.propcase", parent);
#end
#end
        }

        public C${clazz.generatedName}(string value, string parent)
            : base(value, parent)
        {
#foreach($field in $clazz.Fields())
#if(($field.ClassType.Primitive)||($field.ClassType.Name == "DateTime")||($field.ClassType.Name == "Int64")||($field.ClassType.Name == "IList")||($field.ClassType.Name == "ISet")||($field.FullyQualifiedTypeName!=$field.ClassType.Name)||($field.ClassType.Name == "YesNoToBoolUserType")||($field.ClassType.Name == "YesNoToNullableBoolUserType")||($field.ClassType.Name == "NumberToBoolUserType"))
			_$field.propcase = new ConstField("$field.propcase", FormatPath(value, parent));
#else
			_$field.propcase = new C${field.FullyQualifiedTypeName}("$field.propcase", FormatPath(value, parent));
#end
#end
        }
        
#foreach($field in $clazz.Fields())
#if(($field.ClassType.Primitive)||($field.ClassType.Name == "DateTime")||($field.ClassType.Name == "Int64")||($field.ClassType.Name == "IList")||($field.ClassType.Name == "ISet")||($field.FullyQualifiedTypeName!=$field.ClassType.Name)||($field.ClassType.Name == "YesNoToBoolUserType")||($field.ClassType.Name == "YesNoToNullableBoolUserType")||($field.ClassType.Name == "NumberToBoolUserType"))
		public ConstField $field.propcase
#else
		public C$field.FullyQualifiedTypeName $field.propcase
#end
        {
            get
            {
                return this._$field.propcase;
            }
        }
#end

    }


	/// <summary>
	/// POCO for $clazz.generatedName. This class is autogenerated
	/// </summary>
#if($clazz.hasMeta("class-description"))
	/// <remarks>
	/// $languageTool.toJavaDoc($clazz.getMetaAsString("class-description"),0)
	/// </remarks>
#end
## find out if the mapping has at least one custom validation. 
#set($CustomAttribExists = false)
#foreach($field in $clazz.Fields())	
#foreach($child in $field.XmlElement.ChildNodes) 	
#if($child.Attributes.Count > 0 && $child.Attributes.Item(0).Name == "attribute")
#if($child.Attributes.Item(0).Value =="Custom")
#set($CustomAttribExists = true)
#end
#end
#end
#end

	
	
	[Serializable]
	$clazz.scope #if(!$clazz.isInterface())partial#end $clazz.modifiers $clazz.declarationType $clazz.generatedName#if(($languageTool.hasExtends($clazz))||($languageTool.hasImplements($clazz))) : #end$languageTool.getExtends($clazz)#if(($languageTool.hasExtends($clazz))&&($languageTool.hasImplements($clazz))), #end$languageTool.getImplements($clazz)#if(!$languageTool.hasExtends($clazz)) : #if($isObjectValidator) $ObjectValidationBase #else $MultiLanguage #end #end
	{
#if(!$clazz.isInterface())
		#region Consts
		
		private static C$clazz.generatedName props = null;

		
		public static C$clazz.generatedName Props
        {
            get
            {
				if (props == null)
				{
					props = new C${clazz.generatedName}();
				}
                return props;
            }
        }

		#endregion
		
		#region Fields
		
#foreach($field in $clazz.Fields())  

#if($field.ForeignClass)
#if($field.ClassType.Name == "IList")
		$field.FieldScope() System.Collections.Generic.IList<$field.ForeignClass> $field.fieldcase;
#else
		$field.FieldScope() $field.ClassType.Name<$field.ForeignClass> $field.fieldcase;
#end
#else
#if($field.ClassType.Name == "DateTime")
			$field.FieldScope() $field.FullyQualifiedTypeName? $field.fieldcase;
#elseif($field.XmlElement.ChildNodes.Count > 0)
#set($Nullable = "")
#foreach($child in $field.XmlElement.ChildNodes) 	
#if($child.Attributes.Count > 0 && $child.Attributes.Item(0).Name == "attribute")
#if($child.Attributes.Item(0).Value =="Nullable")
#set($Nullable = "?")
#end	
#end	
#end 
		$field.FieldScope() $field.FullyQualifiedTypeName$Nullable $field.fieldcase;
#else
	#if(($field.ClassType.Name == "YesNoToBoolUserType"))
	$field.FieldScope() bool $field.fieldcase;
	#elseif(($field.ClassType.Name == "YesNoToNullableBoolUserType"))
	$field.FieldScope() bool? $field.fieldcase;
	#elseif(($field.ClassType.Name == "NumberToBoolUserType"))
	$field.FieldScope() bool? $field.fieldcase;
	
	#else
	$field.FieldScope() $field.FullyQualifiedTypeName $field.fieldcase;
	#end
#end
#end
#end

		#endregion

		#region Constructors
		
#if($clazz.AllFieldsForFullConstructor().Count>0)
		/// <summary>
		/// Initializes a new instance of the ${clazz.generatedName} class
		/// </summary>
		public ${clazz.generatedName}()
		{
		}
#end
	
		#endregion
	
		#region Properties
		
#foreach($field in $clazz.Fields())
		/// <summary>
		/// Gets or sets the ${field.fieldName} for the current ${clazz.generatedName}
		/// </summary>
		
#if($property.hasMeta("field-description"))
		/// <remarks>
		/// $languageTool.toJavaDoc($clazz.getMetaAsString("field-description"),4)
		/// <remarks>
#end
	
	
#if(($field.ClassType.Name == "ISet")||($field.ClassType.Name == "IList"))
		//[System.Xml.Serialization.XmlIgnore]
[DataMember]	
#if($field.XmlElement.ChildNodes.Count > 0)
#set($Nullable = "")
#foreach($child in $field.XmlElement.ChildNodes) 	
#if($child.Attributes.Count > 0 && $child.Attributes.Item(0).Name == "attribute")
#if($child.Attributes.Item(0).Value =="Required")
		[PangeaRequired]
#end
#if($child.Attributes.Item(0).Value =="NotFuture")
		[NipNotFutureAttribute]
#end
#if($child.Attributes.Item(0).Value =="Custom")
		[$child.InnerText]
#end
#end
#end
#end
#end
#if($field.ForeignClass)
#if($field.ClassType.Name == "IList")
		$field.PropertyGetScope() virtual System.Collections.Generic.IList<$field.ForeignClass> $field.propcase
#else
		$field.PropertyGetScope() virtual $field.ClassType.Name<$field.ForeignClass> $field.propcase
#end
#else
[DataMember]
#if($field.ClassType.Name == "DateTime")
#foreach($child in $field.XmlElement.ChildNodes) 	
#if($child.Attributes.Count > 0 && $child.Attributes.Item(0).Name == "attribute")
#if($child.Attributes.Item(0).Value =="Required")
		[PangeaRequired]
#end
#if($child.Attributes.Item(0).Value =="NotFuture")
		[NipNotFutureAttribute]
#end
#if($child.Attributes.Item(0).Value =="Custom")
		[$child.InnerText]
#end
#end
#end
		$field.PropertyGetScope() virtual $field.FullyQualifiedTypeName? $field.propcase
#elseif($field.XmlElement.ChildNodes.Count > 0)
#set($Nullable = "")
#foreach($child in $field.XmlElement.ChildNodes) 	
#if($child.Attributes.Count > 0 && $child.Attributes.Item(0).Name == "attribute")
#if($child.Attributes.Item(0).Value =="Required")
		[PangeaRequired]
#end
#if($child.Attributes.Item(0).Value =="Custom")
		[$child.InnerText]
#end
#if($child.Attributes.Item(0).Value =="Nullable")
			#set($Nullable = "?")
#end	
#end	
#end 
			$field.PropertyGetScope() #if($isObjectValidator==false && $field.propcase.contains("Description")) override #else virtual #end  $field.FullyQualifiedTypeName$Nullable $field.propcase
#else
  #if(($field.ClassType.Name == "YesNoToBoolUserType"))
		$field.PropertyGetScope() virtual bool $field.propcase
  #elseif(($field.ClassType.Name == "YesNoToNullableBoolUserType"))
		$field.PropertyGetScope() virtual bool? $field.propcase
  #elseif(($field.ClassType.Name == "NumberToBoolUserType"))
		$field.PropertyGetScope() virtual bool? $field.propcase
  #else
		$field.PropertyGetScope() #if($isObjectValidator==false && $field.propcase.contains("Description")) override #else virtual #end $field.FullyQualifiedTypeName $field.propcase
  #end
#end		
#end
		{
			get 
			{ 
#if($field.ForeignClass)			
				if (this.$field.fieldcase == null)
				{
#if($field.ClassType.Name == "ISet")
					this.$field.fieldcase = new HashSet<$field.ForeignClass>();
#elseif($field.ClassType.Name == "IList")
					this.$field.fieldcase = new System.Collections.Generic.List<$field.ForeignClass>();
#end					
				}
#elseif($field.ClassType.Name == "ISet")
				if (this.$field.fieldcase == null)
					this.$field.fieldcase = new ListSet();				
#end
				return this.$field.fieldcase; 
			}
			set 
			{
#if($field.ClassType.Name == "ISet")
				this.$field.fieldcase = value?.ToHashSet();
#elseif($field.ClassType.Name == "IList")
				this.$field.fieldcase = value?.ToList();
#else
				this.$field.fieldcase = value;
#end
				NotifyPropertyChanged("$field.propcase");
			}
		}
/*
#if(($field.ClassType.Name == "ISet")||($field.ClassType.Name == "IList"))
#if($field.ForeignClass)
        [System.Xml.Serialization.XmlElement("$field.propcase")]
        public virtual ${field.ForeignClass}[] ${field.propcase}Wrapper
        {
            get
            {
				return (new System.Collections.Generic.List<$field.ForeignClass>(this.${field.propcase}).ToArray());
            }
            set
            {
				if (value != null)
				{
					this.${field.propcase}.Clear();
					this.${field.propcase}.AddAll(value);
					NotifyPropertyChanged("$field.propcase");
				}
            }
        }
#else

        [System.Xml.Serialization.XmlElement("$field.propcase")]
        public virtual ArrayList ${field.propcase}Wrapper
        {
            get
            {
                return (new System.Collections.Generic.List(this.${field.fieldcase}));
            }
            set
            {
                this.${field.fieldcase}.Clear();
                this.${field.fieldcase}.AddAll(value);
            }
        }
#end
#end
*/

#end


		#endregion
#else
		#region Properties
	
#foreach($field in $clazz.getFields())
		/// <summary>
		/// Gets or sets the ${field.fieldName} for the current ${clazz.generatedName}
		/// </summary>
#if($property.hasMeta("field-description"))
		/// <remarks>
		/// $languageTool.toJavaDoc($clazz.getMetaAsString("field-description"),4)
		/// <remarks>
#end
		
		$field.PropertyGetScope() $field.FullyQualifiedTypeName $field.propcase
		{
			get;
			set;
		}
#end
		#endregion
#end
#if($numOfIdentifiers==1)
		
		#region Equals override
			
		public override bool Equals(object obj)
		{
			if(obj == null)
				return false;
				
            var pi = obj.GetType().GetProperty("$identityField.propcase");
            
            if(pi == null)
            {
				return false;
            }
            
            var val = pi.GetValue(obj, null);
            if(val != null)
            {
				return val.Equals($identityField.propcase);
			}
			else
			{
				#pragma warning disable CS0472 // Generated
				if($identityField.propcase == null)
				#pragma warning restore CS0472 // Generated
					return true;
				else
					return false;
			}
		}	

		public override int GetHashCode()
        {
            return base.GetHashCode();
        }
		
	#endregion

#elseif($numOfIdentifiers>1)

		#region Equals override
#set($GetHashCode = ".GetHashCode()")			
        public override int GetHashCode()
        {
			int hashCode = 1;
#foreach($field in $clazz.Fields())  
#if($field.Identifier)
			if($field.propcase == null)
				throw new Exception("Object's hash code could not be calculated: composite id is not complete. $field.propcase is null");
			hashCode *= $field.propcase$GetHashCode;
#end
#end
			return hashCode;
        }
        
		public override bool Equals(object obj)
		{
			if(obj == null)
				return false;
				
#foreach($field in $clazz.Fields())  
#if($field.Identifier)
			if(!EqualsByField(obj, $field.propcase, "$field.propcase"))
				return false;
#end
#end
			return true;
		}	
		
		private bool EqualsByField(object obj, object field, string fieldName)
		{
            var pi = obj.GetType().GetProperty(fieldName);
            
            if(pi == null)
            {
				return false;
            }
            
            var val = pi.GetValue(obj, null);
            if(val != null)
            {
				return val.Equals(field);
			}
			else
			{
				if(field == null)
					return true;
				else
					return false;
			}
		}
		
	#endregion
#end
	}	
}