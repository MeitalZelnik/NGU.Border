//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

					
// /$$      /$$           /$$   /$$     /$$ /$$                                                                            
//| $$$    /$$$          | $$  | $$    |__/| $$                                                                            
//| $$$$  /$$$$ /$$   /$$| $$ /$$$$$$   /$$| $$        /$$$$$$  /$$$$$$$   /$$$$$$  /$$   /$$  /$$$$$$   /$$$$$$   /$$$$$$ 
//| $$ $$/$$ $$| $$  | $$| $$|_  $$_/  | $$| $$       |____  $$| $$__  $$ /$$__  $$| $$  | $$ |____  $$ /$$__  $$ /$$__  $$
//| $$  $$$| $$| $$  | $$| $$  | $$    | $$| $$        /$$$$$$$| $$  \ $$| $$  \ $$| $$  | $$  /$$$$$$$| $$  \ $$| $$$$$$$$
//| $$\  $ | $$| $$  | $$| $$  | $$ /$$| $$| $$       /$$__  $$| $$  | $$| $$  | $$| $$  | $$ /$$__  $$| $$  | $$| $$_____/
//| $$ \/  | $$|  $$$$$$/| $$  |  $$$$/| $$| $$$$$$$$|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$/|  $$$$$$$|  $$$$$$$|  $$$$$$$
//|__/     |__/ \______/ |__/   \___/  |__/|________/ \_______/|__/  |__/ \____  $$ \______/  \_______/ \____  $$ \_______/
//                                                                       /$$  \ $$                     /$$  \ $$          
//                                                                      |  $$$$$$/                    |  $$$$$$/          
//                                                                       \______/                      \______/          

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using NHibernate.UserTypes;
using Pangea.BaseStructures;
using Pangea.BasicValidators;
using System.Linq;


//using Pangea.Hibernate.UserTypes;

namespace NGU.Core
{

    public class CRequestSubType : ConstField    
    {
		private ConstField _ID = null;
		private ConstField _Code = null;
		private ConstField _Name = null;
		private ConstField _ActiveRecordFlag = null;


        public CRequestSubType()
        {
			_ID = new ConstField("ID");
			_Code = new ConstField("Code");
			_Name = new ConstField("Name");
			_ActiveRecordFlag = new ConstField("ActiveRecordFlag");
        }
        

        public CRequestSubType(string parent)
            : base(parent)
        {
			_ID = new ConstField("ID", parent);
			_Code = new ConstField("Code", parent);
			_Name = new ConstField("Name", parent);
			_ActiveRecordFlag = new ConstField("ActiveRecordFlag", parent);
        }

        public CRequestSubType(string value, string parent)
            : base(value, parent)
        {
			_ID = new ConstField("ID", FormatPath(value, parent));
			_Code = new ConstField("Code", FormatPath(value, parent));
			_Name = new ConstField("Name", FormatPath(value, parent));
			_ActiveRecordFlag = new ConstField("ActiveRecordFlag", FormatPath(value, parent));
        }
        
		public ConstField ID
        {
            get
            {
                return this._ID;
            }
        }
		public ConstField Code
        {
            get
            {
                return this._Code;
            }
        }
		public ConstField Name
        {
            get
            {
                return this._Name;
            }
        }
		public ConstField ActiveRecordFlag
        {
            get
            {
                return this._ActiveRecordFlag;
            }
        }

    }


	/// <summary>
	/// POCO for RequestSubType. This class is autogenerated
	/// </summary>

	
	
	[Serializable]
	public partial  class RequestSubType :  MultiLanguage  	{
		#region Consts
		
		private static CRequestSubType props = null;

		
		public static CRequestSubType Props
        {
            get
            {
				if (props == null)
				{
					props = new CRequestSubType();
				}
                return props;
            }
        }

		#endregion
		
		#region Fields
		

		private Int64 iD;

		private String code;
	
		private String name;
	
		private bool? activeRecordFlag;
	
	
		#endregion

		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the RequestSubType class
		/// </summary>
		public RequestSubType()
		{
		}
	
		#endregion
	
		#region Properties
		
		/// <summary>
		/// Gets or sets the ID for the current RequestSubType
		/// </summary>
		
	
	
[DataMember]
			public  virtual   Int64 ID
		{
			get 
			{ 
				return this.iD; 
			}
			set 
			{
				this.iD = value;
				NotifyPropertyChanged("ID");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the Code for the current RequestSubType
		/// </summary>
		
	
	
[DataMember]
  		public  virtual  String Code
  		{
			get 
			{ 
				return this.code; 
			}
			set 
			{
				this.code = value;
				NotifyPropertyChanged("Code");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the Name for the current RequestSubType
		/// </summary>
		
	
	
[DataMember]
  		public  virtual  String Name
  		{
			get 
			{ 
				return this.name; 
			}
			set 
			{
				this.name = value;
				NotifyPropertyChanged("Name");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the ActiveRecordFlag for the current RequestSubType
		/// </summary>
		
	
	
[DataMember]
  		public virtual bool? ActiveRecordFlag
  		{
			get 
			{ 
				return this.activeRecordFlag; 
			}
			set 
			{
				this.activeRecordFlag = value;
				NotifyPropertyChanged("ActiveRecordFlag");
			}
		}
/*
*/



		#endregion
		
		#region Equals override
			
		public override bool Equals(object obj)
		{
			if(obj == null)
				return false;
				
            var pi = obj.GetType().GetProperty("ID");
            
            if(pi == null)
            {
				return false;
            }
            
            var val = pi.GetValue(obj, null);
            if(val != null)
            {
				return val.Equals(ID);
			}
			else
			{
				#pragma warning disable CS0472 // Generated
				if(ID == null)
				#pragma warning restore CS0472 // Generated
					return true;
				else
					return false;
			}
		}	

		public override int GetHashCode()
        {
            return base.GetHashCode();
        }
		
	#endregion

	}	
}