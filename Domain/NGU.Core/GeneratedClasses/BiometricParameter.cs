//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

							

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using NHibernate.UserTypes;
using Pangea.BaseStructures;
using Pangea.BasicValidators;
using System.Linq;


//using Pangea.Hibernate.UserTypes;

namespace NGU.Core
{

    public class CBiometricParameter : ConstField    
    {
		private ConstField _ID = null;
		private ConstField _SystemId = null;
		private ConstField _BiometricType = null;
		private ConstField _IsMandatory = null;
		private ConstField _ExpirationFactor = null;
		private ConstField _IsActiveRecord = null;


        public CBiometricParameter()
        {
			_ID = new ConstField("ID");
			_SystemId = new ConstField("SystemId");
			_BiometricType = new ConstField("BiometricType");
			_IsMandatory = new ConstField("IsMandatory");
			_ExpirationFactor = new ConstField("ExpirationFactor");
			_IsActiveRecord = new ConstField("IsActiveRecord");
        }
        

        public CBiometricParameter(string parent)
            : base(parent)
        {
			_ID = new ConstField("ID", parent);
			_SystemId = new ConstField("SystemId", parent);
			_BiometricType = new ConstField("BiometricType", parent);
			_IsMandatory = new ConstField("IsMandatory", parent);
			_ExpirationFactor = new ConstField("ExpirationFactor", parent);
			_IsActiveRecord = new ConstField("IsActiveRecord", parent);
        }

        public CBiometricParameter(string value, string parent)
            : base(value, parent)
        {
			_ID = new ConstField("ID", FormatPath(value, parent));
			_SystemId = new ConstField("SystemId", FormatPath(value, parent));
			_BiometricType = new ConstField("BiometricType", FormatPath(value, parent));
			_IsMandatory = new ConstField("IsMandatory", FormatPath(value, parent));
			_ExpirationFactor = new ConstField("ExpirationFactor", FormatPath(value, parent));
			_IsActiveRecord = new ConstField("IsActiveRecord", FormatPath(value, parent));
        }
        
		public ConstField ID
        {
            get
            {
                return this._ID;
            }
        }
		public ConstField SystemId
        {
            get
            {
                return this._SystemId;
            }
        }
		public ConstField BiometricType
        {
            get
            {
                return this._BiometricType;
            }
        }
		public ConstField IsMandatory
        {
            get
            {
                return this._IsMandatory;
            }
        }
		public ConstField ExpirationFactor
        {
            get
            {
                return this._ExpirationFactor;
            }
        }
		public ConstField IsActiveRecord
        {
            get
            {
                return this._IsActiveRecord;
            }
        }

    }


	/// <summary>
	/// POCO for BiometricParameter. This class is autogenerated
	/// </summary>

	
	
	[Serializable]
	public partial  class BiometricParameter :  ObjectValidationBase  	{
		#region Consts
		
		private static CBiometricParameter props = null;

		
		public static CBiometricParameter Props
        {
            get
            {
				if (props == null)
				{
					props = new CBiometricParameter();
				}
                return props;
            }
        }

		#endregion
		
		#region Fields
		

		private Int32 iD;

		private Int32 systemId;
	
		private String biometricType;
	
		private bool? isMandatory;
	
	
		private Int32 expirationFactor;
	
		private bool? isActiveRecord;
	
	
		#endregion

		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the BiometricParameter class
		/// </summary>
		public BiometricParameter()
		{
		}
	
		#endregion
	
		#region Properties
		
		/// <summary>
		/// Gets or sets the ID for the current BiometricParameter
		/// </summary>
		
	
	
[DataMember]
			public  virtual   Int32 ID
		{
			get 
			{ 
				return this.iD; 
			}
			set 
			{
				this.iD = value;
				NotifyPropertyChanged("ID");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the SystemId for the current BiometricParameter
		/// </summary>
		
	
	
[DataMember]
  		public  virtual  Int32 SystemId
  		{
			get 
			{ 
				return this.systemId; 
			}
			set 
			{
				this.systemId = value;
				NotifyPropertyChanged("SystemId");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the BiometricType for the current BiometricParameter
		/// </summary>
		
	
	
[DataMember]
  		public  virtual  String BiometricType
  		{
			get 
			{ 
				return this.biometricType; 
			}
			set 
			{
				this.biometricType = value;
				NotifyPropertyChanged("BiometricType");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the IsMandatory for the current BiometricParameter
		/// </summary>
		
	
	
[DataMember]
  		public virtual bool? IsMandatory
  		{
			get 
			{ 
				return this.isMandatory; 
			}
			set 
			{
				this.isMandatory = value;
				NotifyPropertyChanged("IsMandatory");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the ExpirationFactor for the current BiometricParameter
		/// </summary>
		
	
	
[DataMember]
  		public  virtual  Int32 ExpirationFactor
  		{
			get 
			{ 
				return this.expirationFactor; 
			}
			set 
			{
				this.expirationFactor = value;
				NotifyPropertyChanged("ExpirationFactor");
			}
		}
/*
*/

		/// <summary>
		/// Gets or sets the IsActiveRecord for the current BiometricParameter
		/// </summary>
		
	
	
[DataMember]
  		public virtual bool? IsActiveRecord
  		{
			get 
			{ 
				return this.isActiveRecord; 
			}
			set 
			{
				this.isActiveRecord = value;
				NotifyPropertyChanged("IsActiveRecord");
			}
		}
/*
*/



		#endregion
		
		#region Equals override
			
		public override bool Equals(object obj)
		{
			if(obj == null)
				return false;
				
            var pi = obj.GetType().GetProperty("ID");
            
            if(pi == null)
            {
				return false;
            }
            
            var val = pi.GetValue(obj, null);
            if(val != null)
            {
				return val.Equals(ID);
			}
			else
			{
				#pragma warning disable CS0472 // Generated
				if(ID == null)
				#pragma warning restore CS0472 // Generated
					return true;
				else
					return false;
			}
		}	

		public override int GetHashCode()
        {
            return base.GetHashCode();
        }
		
	#endregion

	}	
}